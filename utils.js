const { stations } = require('./stations');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ (Fisher-Yates shuffle)
function shuffle(array) {
  const result = [...array];
  for (let i = result.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [result[i], result[j]] = [result[j], result[i]];
  }
  return result;
}

// –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º
function distributeParticipants(participantCount) {
  const stationIds = stations.map(s => s.id); // ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']
  const distributions = [];
  
  // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π
  for (let i = 0; i < participantCount; i++) {
    const participantPath = shuffle(stationIds);
    distributions.push(participantPath);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ—Ç–∞—Ü–∏–∏
  // –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  for (let rotation = 0; rotation < stationIds.length; rotation++) {
    const stationCounts = {};
    stationIds.forEach(id => stationCounts[id] = 0);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ä–æ—Ç–∞—Ü–∏–∏
    distributions.forEach(path => {
      stationCounts[path[rotation]]++;
    });
    
    // –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é
    const targetPerStation = Math.floor(participantCount / stationIds.length);
    const remainder = participantCount % stationIds.length;
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∏—Å–±–∞–ª–∞–Ω—Å
    let iterations = 0;
    const maxIterations = 1000;
    
    while (iterations < maxIterations) {
      let needsAdjustment = false;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
      for (const stationId of stationIds) {
        const expectedCount = targetPerStation + (remainder > 0 ? 1 : 0);
        if (Math.abs(stationCounts[stationId] - targetPerStation) > 1) {
          needsAdjustment = true;
          break;
        }
      }
      
      if (!needsAdjustment) break;
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏ –Ω–µ–¥–æ–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏
      const overloaded = [];
      const underloaded = [];
      
      for (const stationId of stationIds) {
        if (stationCounts[stationId] > targetPerStation + 1) {
          overloaded.push(stationId);
        } else if (stationCounts[stationId] < targetPerStation) {
          underloaded.push(stationId);
        }
      }
      
      if (overloaded.length === 0 || underloaded.length === 0) break;
      
      // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      let swapped = false;
      for (let i = 0; i < distributions.length && !swapped; i++) {
        if (overloaded.includes(distributions[i][rotation])) {
          for (let j = i + 1; j < distributions.length; j++) {
            if (underloaded.includes(distributions[j][rotation])) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–º–µ–Ω –Ω–µ –Ω–∞—Ä—É—à–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞
              const canSwap = distributions[i][rotation] !== distributions[j][rotation];
              if (canSwap) {
                // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –≤ —Ç–µ–∫—É—â–µ–π —Ä–æ—Ç–∞—Ü–∏–∏
                [distributions[i][rotation], distributions[j][rotation]] = 
                [distributions[j][rotation], distributions[i][rotation]];
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                stationCounts[distributions[i][rotation]]++;
                stationCounts[distributions[j][rotation]]--;
                swapped = true;
                break;
              }
            }
          }
        }
      }
      
      if (!swapped) break;
      iterations++;
    }
  }
  
  return distributions;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
function formatTime(date) {
  return date.toLocaleTimeString('ru-RU', {
    hour: '2-digit',
    minute: '2-digit',
    timeZone: 'Europe/Moscow'
  });
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(date) {
  return date.toLocaleDateString('ru-RU', {
    day: 'numeric',
    month: 'long',
    year: 'numeric',
    timeZone: 'Europe/Moscow'
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞
function createParticipantMenu() {
  return {
    inline_keyboard: [
      [{ text: 'üìç –¢–µ–∫—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è', callback_data: 'current_station' }],
      [{ text: '‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è', callback_data: 'next_station' }],
      [{ text: '‚è∞ –ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data: 'my_schedule' }],
      [{ text: 'üìû –°–≤—è–∑—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º', callback_data: 'contact_organizer' }],
      [{ text: '‚ÑπÔ∏è –ú–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data: 'my_info' }]
    ]
  };
}

// –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é
function createAdminMenu() {
  return {
    inline_keyboard: [
      [{ text: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', callback_data: 'admin_start_event' }],
      [{ text: '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', callback_data: 'admin_stop_event' }],
      [{ text: 'üìä –°—Ç–∞—Ç—É—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', callback_data: 'admin_status' }],
      [{ text: 'üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', callback_data: 'admin_participants' }]
    ]
  };
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ ID
function getStationInfo(stationId) {
  return stations.find(s => s.id === stationId);
}

// –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Ä–æ—Ç–∞—Ü–∏–∏
function getTimeUntilNextRotation(lastRotationTime, cycleTime) {
  const now = new Date();
  const lastRotation = new Date(lastRotationTime);
  const nextRotation = new Date(lastRotation.getTime() + cycleTime * 60 * 1000);
  const timeRemaining = Math.max(0, nextRotation - now);
  
  const minutes = Math.floor(timeRemaining / 60000);
  const seconds = Math.floor((timeRemaining % 60000) / 1000);
  
  return {
    totalMs: timeRemaining,
    minutes,
    seconds,
    formatted: `${minutes}:${seconds.toString().padStart(2, '0')}`
  };
}

// Escape markdown —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
function escapeMarkdown(text) {
  return text.replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&');
}

// –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏
function createStationMessage(station, rotationNumber, totalRotations, timeRemaining = null) {
  let message = `${station.emoji} *–°—Ç–∞–Ω—Ü–∏—è ${station.id}: ${escapeMarkdown(station.name)}*\n\n`;
  message += `üìç –†–æ—Ç–∞—Ü–∏—è ${rotationNumber} –∏–∑ ${totalRotations}\n\n`;
  message += `‚ùì *${escapeMarkdown(station.shortTitle)}*\n\n`;
  message += `${escapeMarkdown(station.description)}\n`;
  
  if (timeRemaining) {
    message += `\n‚è±Ô∏è –î–æ –ø–µ—Ä–µ—Ö–æ–¥–∞: ${timeRemaining.formatted}`;
  }
  
  return message;
}

// –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
function createScheduleMessage(participantNumber, rotations, currentRotation) {
  let message = `üìÖ *–í–∞—à–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ*\n`;
  message += `–£—á–∞—Å—Ç–Ω–∏–∫ ‚Ññ${participantNumber}\n\n`;
  
  rotations.forEach((rotation, index) => {
    const station = getStationInfo(rotation.station_id);
    const rotationNum = index + 1;
    const isCurrent = rotationNum === currentRotation;
    
    if (isCurrent) {
      message += `‚ñ∂Ô∏è `;
    } else if (rotationNum < currentRotation) {
      message += `‚úÖ `;
    } else {
      message += `‚è≥ `;
    }
    
    message += `${rotationNum}. ${station.emoji} ${escapeMarkdown(station.name)}`;
    
    if (isCurrent) {
      message += ` *(—Å–µ–π—á–∞—Å)*`;
    }
    
    message += '\n';
  });
  
  return message;
}

module.exports = {
  shuffle,
  distributeParticipants,
  formatTime,
  formatDate,
  createParticipantMenu,
  createAdminMenu,
  getStationInfo,
  getTimeUntilNextRotation,
  escapeMarkdown,
  createStationMessage,
  createScheduleMessage
}; 