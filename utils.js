const { stations } = require('./stations');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ (Fisher-Yates shuffle)
function shuffle(array) {
  const result = [...array];
  for (let i = result.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [result[i], result[j]] = [result[j], result[i]];
  }
  return result;
}

// –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º —Å —É—á–µ—Ç–æ–º –≥—Ä—É–ø–ø
function distributeParticipants(participantCount) {
  // –£ –Ω–∞—Å 3 –≥—Ä—É–ø–ø—ã —Å—Ç–∞–Ω—Ü–∏–π, –∑–Ω–∞—á–∏—Ç 3 —Ä–æ—Ç–∞—Ü–∏–∏
  const totalRotations = 3;
  const groups = {
    '1': stations.filter(s => s.group === '1').map(s => s.id), // ['1.1', '1.2', '1.3']
    '2': stations.filter(s => s.group === '2').map(s => s.id), // ['2.1', '2.2', '2.3'] 
    '3': stations.filter(s => s.group === '3').map(s => s.id)  // ['3.1', '3.2', '3.3']
  };
  
  const distributions = [];
  
  // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  const allParticipants = Array.from({ length: participantCount }, (_, i) => i);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ (3 —Ä–æ—Ç–∞—Ü–∏–∏)
  for (let i = 0; i < participantCount; i++) {
    distributions[i] = new Array(totalRotations);
  }
  
  // –î–ª—è –∫–∞–∂–¥–æ–π —Ä–æ—Ç–∞—Ü–∏–∏ (1, 2, 3) –Ω–∞–∑–Ω–∞—á–∞–µ–º –≥—Ä—É–ø–ø—É –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  for (let rotation = 0; rotation < totalRotations; rotation++) {
    const groupNumber = (rotation + 1).toString(); // '1', '2', '3'
    const stationsInGroup = groups[groupNumber]; // —Å—Ç–∞–Ω—Ü–∏–∏ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–π —Ä–æ—Ç–∞—Ü–∏–∏
    const shuffledParticipants = shuffle([...allParticipants]);
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º –≥—Ä—É–ø–ø—ã
    const baseParticipantsPerStation = Math.floor(participantCount / stationsInGroup.length);
    const extraParticipants = participantCount % stationsInGroup.length;
    
    let participantIndex = 0;
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã
    for (let stationIndex = 0; stationIndex < stationsInGroup.length; stationIndex++) {
      const stationId = stationsInGroup[stationIndex];
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
      const participantsForThisStation = baseParticipantsPerStation + 
        (stationIndex < extraParticipants ? 1 : 0);
      
      // –ù–∞–∑–Ω–∞—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —ç—Ç—É —Å—Ç–∞–Ω—Ü–∏—é
      for (let i = 0; i < participantsForThisStation; i++) {
        if (participantIndex < participantCount) {
          const participantNumber = shuffledParticipants[participantIndex];
          distributions[participantNumber][rotation] = stationId;
          participantIndex++;
        }
      }
    }
  }
  
  return distributions;
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
function formatTime(date) {
  return date.toLocaleTimeString('ru-RU', {
    hour: '2-digit',
    minute: '2-digit',
    timeZone: 'Europe/Moscow'
  });
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(date) {
  return date.toLocaleDateString('ru-RU', {
    day: 'numeric',
    month: 'long',
    year: 'numeric',
    timeZone: 'Europe/Moscow'
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞
function createParticipantMenu() {
  return {
    inline_keyboard: [
      [{ text: 'üìç –¢–µ–∫—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è', callback_data: 'current_station' }],
      [{ text: '‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è', callback_data: 'next_station' }],
      [{ text: '‚è∞ –ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data: 'my_schedule' }],
      [{ text: 'üìû –°–≤—è–∑—å —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º', callback_data: 'contact_organizer' }],
      [{ text: '‚ÑπÔ∏è –ú–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data: 'my_info' }]
    ]
  };
}

// –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é
function createAdminMenu(eventState = null) {
  const keyboard = [];
  
  if (!eventState || !eventState.event_started) {
    // –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ
    keyboard.push([{ text: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', callback_data: 'admin_start_event' }]);
  } else {
    // –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–ø—É—â–µ–Ω–æ
    if (eventState.event_paused) {
      // –ù–∞ –ø–∞—É–∑–µ
      keyboard.push([{ text: '‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', callback_data: 'admin_resume_event' }]);
      keyboard.push([{ text: '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', callback_data: 'admin_stop_event' }]);
    } else {
      // –ê–∫—Ç–∏–≤–Ω–æ
      keyboard.push([{ text: '‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', callback_data: 'admin_pause_event' }]);
      keyboard.push([{ text: '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', callback_data: 'admin_stop_event' }]);
    }
  }
  
  // –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
  keyboard.push([{ text: 'üìä –°—Ç–∞—Ç—É—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', callback_data: 'admin_status' }]);
  keyboard.push([{ text: 'üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', callback_data: 'admin_participants' }]);
  
  return { inline_keyboard: keyboard };
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ ID
function getStationInfo(stationId) {
  return stations.find(s => s.id === stationId);
}

// –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Ä–æ—Ç–∞—Ü–∏–∏
function getTimeUntilNextRotation(lastRotationTime, cycleTime) {
  const now = new Date();
  const lastRotation = new Date(lastRotationTime);
  const nextRotation = new Date(lastRotation.getTime() + cycleTime * 60 * 1000);
  const timeRemaining = Math.max(0, nextRotation - now);
  
  const minutes = Math.floor(timeRemaining / 60000);
  const seconds = Math.floor((timeRemaining % 60000) / 1000);
  
  return {
    totalMs: timeRemaining,
    minutes,
    seconds,
    formatted: `${minutes}:${seconds.toString().padStart(2, '0')}`
  };
}

// Escape markdown —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
function escapeMarkdown(text) {
  return text.replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&');
}

// –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏
function createStationMessage(station, rotationNumber, totalRotations, timeRemaining = null) {
  let message = `${station.emoji} *–°—Ç–∞–Ω—Ü–∏—è ${station.id}: ${station.name}*\n\n`;
  message += `üìç –†–æ—Ç–∞—Ü–∏—è ${rotationNumber} –∏–∑ ${totalRotations}\n\n`;
  message += `‚ùì *${station.shortTitle}*\n\n`;
  message += `${station.description}\n`;
  
  if (timeRemaining) {
    message += `\n‚è±Ô∏è –î–æ –ø–µ—Ä–µ—Ö–æ–¥–∞: ${timeRemaining.formatted}`;
  }
  
  return message;
}

// –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
function createScheduleMessage(participantNumber, rotations, currentRotation) {
  let message = `üìÖ *–í–∞—à–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ*\n`;
  message += `–£—á–∞—Å—Ç–Ω–∏–∫ ‚Ññ${participantNumber}\n\n`;
  
  rotations.forEach((rotation, index) => {
    const station = getStationInfo(rotation.station_id);
    const rotationNum = index + 1;
    const isCurrent = rotationNum === currentRotation;
    
    if (isCurrent) {
      message += `‚ñ∂Ô∏è `;
    } else if (rotationNum < currentRotation) {
      message += `‚úÖ `;
    } else {
      message += `‚è≥ `;
    }
    
    message += `${rotationNum}. ${station.emoji} ${station.name}`;
    
    if (isCurrent) {
      message += ` *(—Å–µ–π—á–∞—Å)*`;
    }
    
    message += '\n';
  });
  
  return message;
}

// –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–º–µ—à–∏–≤–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
function analyzeParticipantMixing(distributions) {
  const participantCount = distributions.length;
  const rotationCount = distributions[0].length;
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∫–∞–∂–¥–∞—è –ø–∞—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤–º–µ—Å—Ç–µ
  const meetingCounts = {};
  
  for (let rotation = 0; rotation < rotationCount; rotation++) {
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º –¥–ª—è —ç—Ç–æ–π —Ä–æ—Ç–∞—Ü–∏–∏
    const stationGroups = {};
    
    for (let participant = 0; participant < participantCount; participant++) {
      const station = distributions[participant][rotation];
      if (!stationGroups[station]) {
        stationGroups[station] = [];
      }
      stationGroups[station].push(participant);
    }
    
    // –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å—Ç—Ä–µ—á–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    Object.values(stationGroups).forEach(group => {
      for (let i = 0; i < group.length; i++) {
        for (let j = i + 1; j < group.length; j++) {
          const pair = `${Math.min(group[i], group[j])}-${Math.max(group[i], group[j])}`;
          meetingCounts[pair] = (meetingCounts[pair] || 0) + 1;
        }
      }
    });
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const meetingFrequencies = Object.values(meetingCounts);
  const maxMeetings = meetingFrequencies.length > 0 ? Math.max(...meetingFrequencies) : 0;
  const avgMeetings = meetingFrequencies.length > 0 ? 
    meetingFrequencies.reduce((a, b) => a + b, 0) / meetingFrequencies.length : 0;
  const totalPossiblePairs = (participantCount * (participantCount - 1)) / 2;
  const pairsWhoNeverMet = totalPossiblePairs - meetingFrequencies.length;
  
  return {
    totalPairs: totalPossiblePairs,
    pairsWhoMet: meetingFrequencies.length,
    pairsWhoNeverMet: pairsWhoNeverMet,
    maxMeetingsPerPair: maxMeetings,
    avgMeetingsPerPair: avgMeetings.toFixed(2),
    mixingQuality: ((meetingFrequencies.length / totalPossiblePairs) * 100).toFixed(1)
  };
}

module.exports = {
  shuffle,
  distributeParticipants,
  analyzeParticipantMixing,
  formatTime,
  formatDate,
  createParticipantMenu,
  createAdminMenu,
  getStationInfo,
  getTimeUntilNextRotation,
  escapeMarkdown,
  createStationMessage,
  createScheduleMessage
}; 