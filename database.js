const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvVars = ['SUPABASE_URL', 'SUPABASE_KEY', 'BOT_TOKEN'];
const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);

if (missingVars.length > 0) {
  console.error('‚ùå Missing required environment variables:', missingVars.join(', '));
  console.error('\nüîß Please set the following environment variables:');
  missingVars.forEach(varName => {
    console.error(`   ${varName}=your_${varName.toLowerCase()}_value`);
  });
  
  if (process.env.NODE_ENV === 'production') {
    console.error('\nüöÄ For Railway deployment, set these in your Railway dashboard:');
    console.error('   1. Go to your Railway project');
    console.error('   2. Click on Variables tab');
    console.error('   3. Add each variable with its value');
  } else {
    console.error('\nüíª For local development, create a .env file with these variables');
  }
  
  throw new Error(`Missing environment variables: ${missingVars.join(', ')}`);
}

console.log('‚úÖ Environment variables validated');
console.log(`   SUPABASE_URL: ${process.env.SUPABASE_URL ? 'Set' : 'Missing'}`);
console.log(`   SUPABASE_KEY: ${process.env.SUPABASE_KEY ? 'Set' : 'Missing'}`);
console.log(`   BOT_TOKEN: ${process.env.BOT_TOKEN ? 'Set' : 'Missing'}`);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (–≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –≤ Supabase SQL Editor)
const createTablesSQL = `
-- –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
CREATE TABLE IF NOT EXISTS participants (
  id SERIAL PRIMARY KEY,
  user_id BIGINT UNIQUE NOT NULL,
  username TEXT,
  first_name TEXT,
  last_name TEXT,
  participant_number INTEGER UNIQUE NOT NULL,
  registered_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü–∞ —Ä–æ—Ç–∞—Ü–∏–π
CREATE TABLE IF NOT EXISTS rotations (
  id SERIAL PRIMARY KEY,
  participant_id INTEGER REFERENCES participants(id),
  rotation_number INTEGER NOT NULL,
  station_id TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
CREATE TABLE IF NOT EXISTS event_state (
  id SERIAL PRIMARY KEY,
  event_started BOOLEAN DEFAULT FALSE,
  event_paused BOOLEAN DEFAULT FALSE,
  current_rotation INTEGER DEFAULT 1,
  last_rotation_time TIMESTAMP WITH TIME ZONE,
  pause_time TIMESTAMP WITH TIME ZONE,
  total_pause_duration INTEGER DEFAULT 0,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü–∞ –∞–¥–º–∏–Ω–æ–≤
CREATE TABLE IF NOT EXISTS admins (
  id SERIAL PRIMARY KEY,
  username TEXT UNIQUE NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
CREATE INDEX IF NOT EXISTS idx_rotations_participant_rotation ON rotations(participant_id, rotation_number);
CREATE INDEX IF NOT EXISTS idx_participants_user_id ON participants(user_id);
CREATE INDEX IF NOT EXISTS idx_admins_username ON admins(username);
`;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const testConnection = async () => {
  try {
    console.log('Testing database connection...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    const { data, error } = await supabase
      .from('event_state')
      .select('*')
      .limit(1);
    
    if (error) {
      console.error('Database connection failed:', error);
      throw new Error(`Database error: ${error.message}`);
    }
    
    console.log('‚úÖ Database connection successful');
    return true;
  } catch (error) {
    console.error('‚ùå Database connection failed:', error.message);
    throw error;
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const validateSchema = async () => {
  try {
    console.log('Validating database schema...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    const { data, error } = await supabase
      .from('event_state')
      .select('event_started, event_paused, current_rotation, total_pause_duration')
      .limit(1);
    
    if (error) {
      if (error.message.includes('event_paused')) {
        console.error('‚ùå Missing columns in event_state table!');
        console.error('Please run the SQL update script in Supabase:');
        console.error('ALTER TABLE event_state ADD COLUMN event_paused BOOLEAN DEFAULT FALSE;');
        console.error('ALTER TABLE event_state ADD COLUMN pause_time TIMESTAMP WITH TIME ZONE;');
        console.error('ALTER TABLE event_state ADD COLUMN total_pause_duration INTEGER DEFAULT 0;');
        throw new Error('Database schema is outdated. Please update event_state table.');
      }
      throw error;
    }
    
    console.log('‚úÖ Database schema is valid');
    return true;
  } catch (error) {
    console.error('‚ùå Schema validation failed:', error.message);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
const participants = {
  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
  async register(userId, username, firstName, lastName) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –Ω–æ–º–µ—Ä
      const { data: count } = await supabase
        .from('participants')
        .select('participant_number', { count: 'exact' });
      
      const nextNumber = String(count.length + 1).padStart(3, '0');
      
      const { data, error } = await supabase
        .from('participants')
        .insert({
          user_id: userId,
          username: username,
          first_name: firstName,
          last_name: lastName,
          participant_number: nextNumber
        })
        .select()
        .single();
      
      if (error) throw error;
      return data;
    } catch (error) {
      console.error('Error registering participant:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ user_id
  async getByUserId(userId) {
    try {
      const { data, error } = await supabase
        .from('participants')
        .select('*')
        .eq('user_id', userId)
        .single();
      
      if (error && error.code !== 'PGRST116') throw error;
      return data;
    } catch (error) {
      console.error('Error getting participant:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  async getAll() {
    try {
      const { data, error } = await supabase
        .from('participants')
        .select('*')
        .order('participant_number');
      
      if (error) throw error;
      return data || [];
    } catch (error) {
      console.error('Error getting all participants:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  async getCount() {
    try {
      const { count, error } = await supabase
        .from('participants')
        .select('*', { count: 'exact', head: true });
      
      if (error) throw error;
      return count || 0;
    } catch (error) {
      console.error('Error getting participants count:', error);
      throw error;
    }
  }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–æ—Ç–∞—Ü–∏—è–º–∏
const rotations = {
  // –°–æ–∑–¥–∞—Ç—å —Ä–æ—Ç–∞—Ü–∏–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
  async createForParticipant(participantId, stationSequence) {
    try {
      const rotationData = stationSequence.map((stationId, index) => ({
        participant_id: participantId,
        rotation_number: index + 1,
        station_id: stationId
      }));

      const { error } = await supabase
        .from('rotations')
        .insert(rotationData);
      
      if (error) throw error;
      return true;
    } catch (error) {
      console.error('Error creating rotations:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–æ—Ç–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
  async getByParticipantId(participantId) {
    try {
      const { data, error } = await supabase
        .from('rotations')
        .select('*')
        .eq('participant_id', participantId)
        .order('rotation_number');
      
      if (error) throw error;
      return data || [];
    } catch (error) {
      console.error('Error getting participant rotations:', error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞–Ω—Ü–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–∞
  async getCurrentStation(participantId, currentRotation) {
    try {
      const { data, error } = await supabase
        .from('rotations')
        .select('station_id')
        .eq('participant_id', participantId)
        .eq('rotation_number', currentRotation)
        .single();
      
      if (error) throw error;
      return data?.station_id;
    } catch (error) {
      console.error('Error getting current station:', error);
      return null;
    }
  },

  // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–æ—Ç–∞—Ü–∏–∏ (–¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)
  async deleteAll() {
    try {
      const { error } = await supabase
        .from('rotations')
        .delete()
        .gt('id', 0);
      
      if (error) throw error;
      return true;
    } catch (error) {
      console.error('Error deleting all rotations:', error);
      throw error;
    }
  }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
const eventState = {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  async init() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    const { data } = await supabase
      .from('event_state')
      .select('*')
      .limit(1);
    
    if (!data || data.length === 0) {
      await supabase
        .from('event_state')
        .insert({
          event_started: false,
          event_paused: false,
          current_rotation: 1,
          total_pause_duration: 0
        });
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  async get() {
    const { data, error } = await supabase
      .from('event_state')
      .select('*')
      .limit(1)
      .single();
    
    if (error) throw error;
    return data;
  },

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
  async start() {
    const { data, error } = await supabase
      .from('event_state')
      .update({
        event_started: true,
        event_paused: false,
        current_rotation: 1,
        last_rotation_time: new Date().toISOString(),
        pause_time: null,
        total_pause_duration: 0,
        updated_at: new Date().toISOString()
      })
      .eq('id', 1);
    
    if (error) throw error;
    return data;
  },

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
  async stop() {
    const { data, error } = await supabase
      .from('event_state')
      .update({
        event_started: false,
        event_paused: false,
        pause_time: null,
        updated_at: new Date().toISOString()
      })
      .eq('id', 1);
    
    if (error) throw error;
    return data;
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ä–æ—Ç–∞—Ü–∏—é
  async updateRotation(rotationNumber) {
    const { data, error } = await supabase
      .from('event_state')
      .update({
        current_rotation: rotationNumber,
        last_rotation_time: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .eq('id', 1);
    
    if (error) throw error;
    return data;
  },

  // –ü–∞—É–∑–∞
  async pause() {
    const { data, error } = await supabase
      .from('event_state')
      .update({
        event_paused: true,
        pause_time: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .eq('id', 1);
    
    if (error) throw error;
    return data;
  },

  // –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å
  async resume() {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–∞—É–∑—ã
    const currentState = await this.get();
    const pauseDuration = currentState.pause_time ? 
      Math.floor((new Date() - new Date(currentState.pause_time)) / 1000) : 0;
    
    const { data, error } = await supabase
      .from('event_state')
      .update({
        event_paused: false,
        pause_time: null,
        total_pause_duration: (currentState.total_pause_duration || 0) + pauseDuration,
        updated_at: new Date().toISOString()
      })
      .eq('id', 1);
    
    if (error) throw error;
    return data;
  }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–¥–º–∏–Ω–∞–º–∏
const admins = {
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
  async isAdmin(username) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      const envAdmins = process.env.ADMIN_USERNAMES?.split(',') || [];
      if (envAdmins.includes(username)) {
        return true;
      }

      // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { data, error } = await supabase
        .from('admins')
        .select('username')
        .eq('username', username)
        .single();
      
      return !!data;
    } catch (error) {
      console.error('Error checking admin:', error);
      return false;
    }
  },

  // –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞
  async add(username, userId) {
    try {
      const { error } = await supabase
        .from('admins')
        .insert({
          username: username,
          user_id: userId
        });
      
      if (error && error.code !== '23505') throw error; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥—É–±–ª–∏–∫–∞—Ç–∞
      return true;
    } catch (error) {
      console.error('Error adding admin:', error);
      throw error;
    }
  }
};

module.exports = {
  supabase,
  testConnection,
  validateSchema,
  participants,
  rotations,
  eventState,
  admins,
  createTablesSQL
}; 