const { Telegraf } = require('telegraf');
const { session } = require('telegraf');
require('dotenv').config();

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
const { 
  participants, 
  rotations, 
  eventState, 
  admins,
  testConnection,
  validateSchema,
  createTablesSQL 
} = require('./database');

const { 
  stations, 
  networkingDescription,
  CYCLE_TIME 
} = require('./stations');

const {
  distributeParticipants,
  analyzeParticipantMixing,
  createParticipantMenu,
  createAdminMenu,
  getStationInfo,
  getTimeUntilNextRotation,
  escapeMarkdown,
  createStationMessage,
  createScheduleMessage
} = require('./utils');

const EventScheduler = require('./scheduler');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);
const scheduler = new EventScheduler(bot);

// Middleware –¥–ª—è —Å–µ—Å—Å–∏–π
bot.use(session());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initDatabase() {
  try {
    console.log('üîÑ Initializing database...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await testConnection();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É
    await validateSchema();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await eventState.init();
    
    console.log('‚úÖ Database initialized successfully');
    
    if (process.env.NODE_ENV !== 'production') {
      console.log('\nSQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≤ Supabase:');
      console.log(createTablesSQL);
    }
  } catch (error) {
    console.error('‚ùå Database initialization failed:', error);
    
    if (process.env.NODE_ENV === 'production') {
      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –±–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
      throw error;
    } else {
      // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
      console.log('\nüõ†Ô∏è To fix this, run the following SQL in Supabase:');
      console.log(createTablesSQL);
      throw error;
    }
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const username = ctx.from.username || '';
    const firstName = ctx.from.first_name || '';
    const lastName = ctx.from.last_name || '';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    const isAdmin = await admins.isAdmin(username);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫
    let participant = await participants.getByUserId(userId);

    if (!participant) {
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
      participant = await participants.register(userId, username, firstName, lastName);
      
      // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
      let welcomeMessage = `üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ Sechenov Pro Network!*\n\n`;
      welcomeMessage += `${networkingDescription}\n\n`;
      welcomeMessage += `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n`;
      welcomeMessage += `üìã –í–∞—à –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞: *${participant.participant_number}*\n\n`;
      welcomeMessage += `üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:\n`;
      welcomeMessage += process.env.CV_FORM_URL || 'https://forms.yandex.ru/cloud/67d6fd5090fa7be3dc213e5f/';
      welcomeMessage += `\n\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –í–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—à–µ–π –ø–µ—Ä–≤–æ–π —Å—Ç–∞–Ω—Ü–∏–∏.`;

      await ctx.replyWithMarkdown(welcomeMessage, {
        disable_web_page_preview: true,
        reply_markup: createParticipantMenu()
      });
    } else {
      // –£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
      let message = `üëã *–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!*\n\n`;
      message += `üìã –í–∞—à –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞: *${participant.participant_number}*\n\n`;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∞–ª–æ—Å—å –ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
      const state = await eventState.get();
      if (state && state.event_started) {
        message += `‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –Ω–∞—á–∞–ª–æ—Å—å!\n`;
        message += `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.`;
      } else {
        message += `‚è≥ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å.\n`;
        message += `–û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ.`;
      }

      await ctx.replyWithMarkdown(message, {
        reply_markup: createParticipantMenu()
      });
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
    if (isAdmin) {
      const currentState = await eventState.get();
      await ctx.replyWithMarkdown(
        `üë®‚Äçüíº *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n–í—ã –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º.`,
        { reply_markup: createAdminMenu(currentState) }
      );
    }

  } catch (error) {
    console.error('Error in /start command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /start_event (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.command('start_event', async (ctx) => {
  try {
    const username = ctx.from.username || '';
    const isAdmin = await admins.isAdmin(username);

    if (!isAdmin) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }

    console.log('üîç Starting event via command...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('üîç Checking current state...');
    const state = await eventState.get();
    if (state && state.event_started) {
      await ctx.reply('‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ!');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    console.log('üîç Getting all participants...');
    const allParticipants = await participants.getAll();
    console.log(`üîç Found ${allParticipants.length} participants`);
    if (allParticipants.length === 0) {
      await ctx.reply('‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!');
      return;
    }

    await ctx.reply(`üöÄ –ó–∞–ø—É—Å–∫–∞—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ...\n\nüìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${allParticipants.length}`);

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–æ—Ç–∞—Ü–∏–∏
    console.log('üîç Deleting old rotations...');
    await rotations.deleteAll();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    console.log('üîç Generating participant distribution...');
    const distributions = distributeParticipants(allParticipants.length);
    console.log('üîç Distribution generated successfully');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    console.log('üîç Saving rotations for each participant...');
    for (let i = 0; i < allParticipants.length; i++) {
      const participant = allParticipants[i];
      const stationSequence = distributions[i];
      console.log(`üîç Saving rotations for participant ${i + 1}/${allParticipants.length} (ID: ${participant.id})`);
      await rotations.createForParticipant(participant.id, stationSequence);
    }
    console.log('üîç All rotations saved successfully');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    console.log('üîç Starting event state...');
    await eventState.start();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    console.log('üîç Sending initial notifications...');
    await scheduler.sendInitialNotifications();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    console.log('üîç Starting scheduler...');
    await scheduler.start();

    console.log('üîç Event started successfully!');
    await ctx.reply(`‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!\n\nüîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ ${CYCLE_TIME} –º–∏–Ω—É—Ç.`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
    const updatedState = await eventState.get();
    await ctx.replyWithMarkdown(
      `üë®‚ÄçÔøΩÔøΩ *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ`,
      { reply_markup: createAdminMenu(updatedState) }
    );

  } catch (error) {
    console.error('‚ùå Error in /start_event command:', error);
    console.error('Error stack:', error.stack);
    await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${error.message}`);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /stop_event (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.command('stop_event', async (ctx) => {
  try {
    const username = ctx.from.username || '';
    const isAdmin = await admins.isAdmin(username);

    if (!isAdmin) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    await eventState.stop();
    scheduler.stop();

    await ctx.reply('‚èπÔ∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n\n‚ö†Ô∏è –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç –Ω–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã.');

  } catch (error) {
    console.error('Error in /stop_event command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /pause_event (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.command('pause_event', async (ctx) => {
  try {
    const username = ctx.from.username || '';
    const isAdmin = await admins.isAdmin(username);

    if (!isAdmin) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }

    const state = await eventState.get();
    if (!state || !state.event_started) {
      await ctx.reply('‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ!');
      return;
    }

    if (state.event_paused) {
      await ctx.reply('‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
      return;
    }

    // –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    await eventState.pause();
    scheduler.pause();

    await ctx.reply('‚è∏Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n\nüí° –ü—Ä–æ–≥—Ä–µ—Å—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /resume_event –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.');

  } catch (error) {
    console.error('Error in /pause_event command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /resume_event (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.command('resume_event', async (ctx) => {
  try {
    const username = ctx.from.username || '';
    const isAdmin = await admins.isAdmin(username);

    if (!isAdmin) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }

    const state = await eventState.get();
    if (!state || !state.event_started) {
      await ctx.reply('‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ!');
      return;
    }

    if (!state.event_paused) {
      await ctx.reply('‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
      return;
    }

    // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    await eventState.resume();
    await scheduler.resume();

    const pauseDuration = Math.floor((state.total_pause_duration || 0) / 60);
    await ctx.reply(`‚ñ∂Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –ø–∞—É–∑—ã: ${pauseDuration} –º–∏–Ω.\nüîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.`);

  } catch (error) {
    console.error('Error in /resume_event command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /status (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.command('status', async (ctx) => {
  try {
    const username = ctx.from.username || '';
    const isAdmin = await admins.isAdmin(username);

    if (!isAdmin) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }

    const state = await eventState.get();
    const participantCount = await participants.getCount();

    let message = `üìä *–°—Ç–∞—Ç—É—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è*\n\n`;
    message += `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participantCount}\n`;
    
    if (state && state.event_started) {
      message += `‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–æ\n`;
      message += `üîÑ –¢–µ–∫—É—â–∞—è —Ä–æ—Ç–∞—Ü–∏—è: ${state.current_rotation} –∏–∑ ${stations.length}\n`;
      
      const timeRemaining = getTimeUntilNextRotation(state.last_rotation_time, CYCLE_TIME);
      message += `‚è±Ô∏è –î–æ —Å–ª–µ–¥—É—é—â–µ–π —Ä–æ—Ç–∞—Ü–∏–∏: ${timeRemaining.formatted}\n`;
    } else {
      message += `‚è∏Ô∏è –°—Ç–∞—Ç—É—Å: –ù–µ –∑–∞–ø—É—â–µ–Ω–æ`;
    }

    await ctx.replyWithMarkdown(message);

  } catch (error) {
    console.error('Error in /status command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /analyze_mixing (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.command('analyze_mixing', async (ctx) => {
  try {
    const username = ctx.from.username || '';
    const isAdmin = await admins.isAdmin(username);

    if (!isAdmin) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }

    const allParticipants = await participants.getAll();
    if (allParticipants.length === 0) {
      await ctx.reply('‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!');
      return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    const distributions = distributeParticipants(allParticipants.length);
    const analysis = analyzeParticipantMixing(distributions);

    let message = `üìä *–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–º–µ—à–∏–≤–∞–Ω–∏—è*\n\n`;
    message += `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${allParticipants.length}\n`;
    message += `üîÑ –†–æ—Ç–∞—Ü–∏–π: ${stations.length}\n\n`;
    message += `üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å—Ç—Ä–µ—á:*\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–∞—Ä: ${analysis.totalPairs}\n`;
    message += `‚Ä¢ –ü–∞—Ä, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—Ç—è—Ç—Å—è: ${analysis.pairsWhoMet}\n`;
    message += `‚Ä¢ –ü–∞—Ä, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—Å—Ç—Ä–µ—Ç—è—Ç—Å—è: ${analysis.pairsWhoNeverMet}\n\n`;
    message += `üéØ *–ö–∞—á–µ—Å—Ç–≤–æ —Å–º–µ—à–∏–≤–∞–Ω–∏—è:*\n`;
    message += `‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –≤—Å—Ç—Ä–µ—á –æ–¥–Ω–æ–π –ø–∞—Ä—ã: ${analysis.maxMeetingsPerPair}\n`;
    message += `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Å—Ç—Ä–µ—á –Ω–∞ –ø–∞—Ä—É: ${analysis.avgMeetingsPerPair}\n`;
    message += `‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤: ${analysis.mixingQuality}%\n\n`;
    
    if (analysis.mixingQuality >= 80) {
      message += `‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ —Å–º–µ—à–∏–≤–∞–Ω–∏–µ!`;
    } else if (analysis.mixingQuality >= 60) {
      message += `‚ö†Ô∏è –•–æ—Ä–æ—à–µ–µ —Å–º–µ—à–∏–≤–∞–Ω–∏–µ.`;
    } else {
      message += `‚ùå –ü–ª–æ—Ö–æ–µ —Å–º–µ—à–∏–≤–∞–Ω–∏–µ.`;
    }

    await ctx.replyWithMarkdown(message);

  } catch (error) {
    console.error('Error in /analyze_mixing command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–º–µ—à–∏–≤–∞–Ω–∏—è.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /admin_menu (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤) - –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
bot.command('admin_menu', async (ctx) => {
  try {
    const username = ctx.from.username || '';
    const isAdmin = await admins.isAdmin(username);

    if (!isAdmin) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }

    const currentState = await eventState.get();
    const participantCount = await participants.getCount();
    
    let statusText = '';
    if (currentState && currentState.event_started) {
      if (currentState.event_paused) {
        statusText = '‚è∏Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
      } else {
        statusText = '‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ';
      }
    } else {
      statusText = '‚è∏Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ';
    }

    await ctx.replyWithMarkdown(
      `üë®‚Äçüíº *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n${statusText}\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participantCount}`,
      { reply_markup: createAdminMenu(currentState) }
    );

  } catch (error) {
    console.error('Error in /admin_menu command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback queries
bot.on('callback_query', async (ctx) => {
  try {
    const data = ctx.callbackQuery.data;
    const userId = ctx.from.id;
    const username = ctx.from.username || '';

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
    await ctx.answerCbQuery();

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const participant = await participants.getByUserId(userId);
    
    if (!participant && !data.startsWith('admin_')) {
      await ctx.reply('‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    const state = await eventState.get();
    const eventStarted = state && state.event_started;

    switch (data) {
      case 'current_station':
        if (!eventStarted) {
          await ctx.reply('‚è≥ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å.');
          break;
        }

        if (state.event_paused) {
          await ctx.reply('‚è∏Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n\n–û–∂–∏–¥–∞–π—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤.');
          break;
        }

        const currentStationId = await rotations.getCurrentStation(participant.id, state.current_rotation);
        if (currentStationId) {
          const station = getStationInfo(currentStationId);
          const timeRemaining = getTimeUntilNextRotation(state.last_rotation_time, CYCLE_TIME);
          const message = createStationMessage(station, state.current_rotation, stations.length, timeRemaining);
          await ctx.replyWithMarkdown(message);
        } else {
          await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏.');
        }
        break;

      case 'next_station':
        if (!eventStarted) {
          await ctx.reply('‚è≥ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å.');
          break;
        }

        if (state.event_paused) {
          await ctx.reply('‚è∏Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.');
          break;
        }

        const nextRotation = state.current_rotation + 1;
        if (nextRotation > stations.length) {
          await ctx.reply('üèÅ –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–Ω—Ü–∏—è! –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–∫–æ—Ä–æ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.');
          break;
        }

        const nextStationId = await rotations.getCurrentStation(participant.id, nextRotation);
        if (nextStationId) {
          const station = getStationInfo(nextStationId);
          let message = `‚è≠Ô∏è *–°–ª–µ–¥—É—é—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è*\n\n`;
          message += `${station.emoji} *${station.name}*\n\n`;
          message += `_${station.shortTitle}_`;
          await ctx.replyWithMarkdown(message);
        }
        break;

      case 'my_schedule':
        const participantRotations = await rotations.getByParticipantId(participant.id);
        if (participantRotations.length > 0) {
          const currentRotation = eventStarted ? state.current_rotation : 0;
          const message = createScheduleMessage(participant.participant_number, participantRotations, currentRotation);
          await ctx.replyWithMarkdown(message);
        } else {
          await ctx.reply('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.');
        }
        break;

      case 'contact_organizer':
        let contactMessage = `üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤*\n\n`;
        contactMessage += `–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n\n`;
        contactMessage += `–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–æ–π—Ç–∏ –∫ –ª—é–±–æ–º—É –≤–æ–ª–æ–Ω—Ç–µ—Ä—É –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏.`;
        await ctx.replyWithMarkdown(contactMessage);
        break;

      case 'my_info':
        let infoMessage = `‚ÑπÔ∏è *–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n`;
        infoMessage += `üìã –ù–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞: *${participant.participant_number}*\n`;
        infoMessage += `üë§ –ò–º—è: ${participant.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
        if (participant.username) {
          infoMessage += `üÜî Username: @${participant.username}\n`;
        }
        await ctx.replyWithMarkdown(infoMessage);
        break;

      // –ê–¥–º–∏–Ω—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
      case 'admin_start_event':
        const isAdminStart = await admins.isAdmin(username);
        if (!isAdminStart) {
          await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
          break;
        }

        try {
          console.log('üîç Starting event process...');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          console.log('üîç Checking current state...');
          const currentState = await eventState.get();
          if (currentState && currentState.event_started) {
            await ctx.reply('‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ!');
            break;
          }

          // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
          console.log('üîç Getting all participants...');
          const allParticipants = await participants.getAll();
          console.log(`üîç Found ${allParticipants.length} participants`);
          if (allParticipants.length === 0) {
            await ctx.reply('‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!');
            break;
          }

          await ctx.reply(`üöÄ –ó–∞–ø—É—Å–∫–∞—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ...\n\nüìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${allParticipants.length}`);

          // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–æ—Ç–∞—Ü–∏–∏
          console.log('üîç Deleting old rotations...');
          await rotations.deleteAll();

          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
          console.log('üîç Generating participant distribution...');
          const distributions = distributeParticipants(allParticipants.length);
          console.log('üîç Distribution generated successfully');

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
          console.log('üîç Saving rotations for each participant...');
          for (let i = 0; i < allParticipants.length; i++) {
            const participant = allParticipants[i];
            const stationSequence = distributions[i];
            console.log(`üîç Saving rotations for participant ${i + 1}/${allParticipants.length} (ID: ${participant.id})`);
            await rotations.createForParticipant(participant.id, stationSequence);
          }
          console.log('üîç All rotations saved successfully');

          // –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
          console.log('üîç Starting event state...');
          await eventState.start();

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          console.log('üîç Sending initial notifications...');
          await scheduler.sendInitialNotifications();

          // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
          console.log('üîç Starting scheduler...');
          await scheduler.start();

          console.log('üîç Event started successfully!');
          await ctx.reply(`‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!\n\nüîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ ${CYCLE_TIME} –º–∏–Ω—É—Ç.`);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
          const updatedState = await eventState.get();
          await ctx.replyWithMarkdown(
            `üë®‚Äçüíº *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ`,
            { reply_markup: createAdminMenu(updatedState) }
          );
        } catch (error) {
          console.error('‚ùå Error in admin_start_event callback:', error);
          console.error('Error stack:', error.stack);
          await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${error.message}`);
        }
        break;

      case 'admin_pause_event':
        const isAdminPause = await admins.isAdmin(username);
        if (!isAdminPause) {
          await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
          break;
        }

        try {
          const currentState = await eventState.get();
          if (!currentState || !currentState.event_started) {
            await ctx.reply('‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ!');
            break;
          }

          if (currentState.event_paused) {
            await ctx.reply('‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
            break;
          }

          // –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
          await eventState.pause();
          scheduler.pause();

          await ctx.reply('‚è∏Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n\nüí° –ü—Ä–æ–≥—Ä–µ—Å—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.');
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
          const updatedState = await eventState.get();
          await ctx.replyWithMarkdown(
            `üë®‚Äçüíº *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n‚è∏Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`,
            { reply_markup: createAdminMenu(updatedState) }
          );
        } catch (error) {
          console.error('Error in admin_pause_event callback:', error);
          await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.');
        }
        break;

      case 'admin_resume_event':
        const isAdminResume = await admins.isAdmin(username);
        if (!isAdminResume) {
          await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
          break;
        }

        try {
          const currentState = await eventState.get();
          if (!currentState || !currentState.event_started) {
            await ctx.reply('‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ!');
            break;
          }

          if (!currentState.event_paused) {
            await ctx.reply('‚ö†Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
            break;
          }

          // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
          await eventState.resume();
          await scheduler.resume();

          const pauseDuration = Math.floor((currentState.total_pause_duration || 0) / 60);
          await ctx.reply(`‚ñ∂Ô∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –ø–∞—É–∑—ã: ${pauseDuration} –º–∏–Ω.\nüîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è.`);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
          const updatedState = await eventState.get();
          await ctx.replyWithMarkdown(
            `üë®‚Äçüíº *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ`,
            { reply_markup: createAdminMenu(updatedState) }
          );
        } catch (error) {
          console.error('Error in admin_resume_event callback:', error);
          await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.');
        }
        break;

      case 'admin_stop_event':
        const isAdminStop = await admins.isAdmin(username);
        if (!isAdminStop) {
          await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
          break;
        }

        try {
          // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
          await eventState.stop();
          scheduler.stop();
          await ctx.reply('‚èπÔ∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n\n‚ö†Ô∏è –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç –Ω–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã.');
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
          const updatedState = await eventState.get();
          await ctx.replyWithMarkdown(
            `üë®‚Äçüíº *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n‚èπÔ∏è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`,
            { reply_markup: createAdminMenu(updatedState) }
          );
        } catch (error) {
          console.error('Error in admin_stop_event callback:', error);
          await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.');
        }
        break;

      case 'admin_status':
        const isAdminStatus = await admins.isAdmin(username);
        if (!isAdminStatus) {
          await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
          break;
        }

        try {
          const currentState = await eventState.get();
          const participantCount = await participants.getCount();

          let statusMessage = `üìä *–°—Ç–∞—Ç—É—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è*\n\n`;
          statusMessage += `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participantCount}\n`;
          
          if (currentState && currentState.event_started) {
            if (currentState.event_paused) {
              statusMessage += `‚è∏Ô∏è –°—Ç–∞—Ç—É—Å: –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n`;
              const pauseDuration = Math.floor((currentState.total_pause_duration || 0) / 60);
              statusMessage += `‚è±Ô∏è –í—Ä–µ–º—è –ø–∞—É–∑—ã: ${pauseDuration} –º–∏–Ω.\n`;
            } else {
              statusMessage += `‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–æ\n`;
              const timeRemaining = getTimeUntilNextRotation(currentState.last_rotation_time, CYCLE_TIME);
              statusMessage += `‚è±Ô∏è –î–æ —Å–ª–µ–¥—É—é—â–µ–π —Ä–æ—Ç–∞—Ü–∏–∏: ${timeRemaining.formatted}\n`;
            }
            statusMessage += `üîÑ –¢–µ–∫—É—â–∞—è —Ä–æ—Ç–∞—Ü–∏—è: ${currentState.current_rotation} –∏–∑ ${stations.length}\n`;
          } else {
            statusMessage += `‚è∏Ô∏è –°—Ç–∞—Ç—É—Å: –ù–µ –∑–∞–ø—É—â–µ–Ω–æ`;
          }

          await ctx.replyWithMarkdown(statusMessage);
        } catch (error) {
          console.error('Error in admin_status callback:', error);
          await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.');
        }
        break;

      case 'admin_participants':
        const isAdminParticipants = await admins.isAdmin(username);
        if (isAdminParticipants) {
          const allParticipants = await participants.getAll();
          let message = `üë• *–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (${allParticipants.length})*\n\n`;
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
          const limit = Math.min(20, allParticipants.length);
          for (let i = 0; i < limit; i++) {
            const p = allParticipants[i];
            message += `${p.participant_number}. ${p.first_name || '–ë–µ–∑ –∏–º–µ–Ω–∏'}`;
            if (p.username) message += ` (@${p.username})`;
            message += '\n';
          }
          
          if (allParticipants.length > 20) {
            message += `\n... –∏ –µ—â–µ ${allParticipants.length - 20} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`;
          }
          
          await ctx.replyWithMarkdown(message);
        }
        break;
    }

  } catch (error) {
    console.error('Error in callback query handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`Error for ${ctx.updateType}:`, err);
  
  // –ù–µ –∫—Ä–∞—à–∏–º—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  if (err.code && err.code.startsWith('PGRST')) {
    console.error('Supabase error:', err.message);
    ctx.reply('‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.').catch(() => {});
    return;
  }
  
  // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –Ω–æ –Ω–µ –∫—Ä–∞—à–∏–º—Å—è
  console.error('Bot error details:', {
    error: err.message,
    stack: err.stack,
    update: ctx.update
  });
});

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  // –ù–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
});

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–µ–º –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è graceful shutdown
  if (process.env.NODE_ENV === 'production') {
    console.log('Attempting graceful shutdown...');
    scheduler.stop();
    bot.stop('Uncaught Exception');
    process.exit(1);
  }
});

// Graceful shutdown signals  
const gracefulShutdown = (signal) => {
  console.log(`Received ${signal}. Starting graceful shutdown...`);
  
  scheduler.stop();
  
  bot.stop(signal).then(() => {
    console.log('Bot stopped gracefully');
    process.exit(0);
  }).catch((error) => {
    console.error('Error during shutdown:', error);
    process.exit(1);
  });
  
  // Force exit after 10 seconds
  setTimeout(() => {
    console.log('Force exiting...');
    process.exit(1);
  }, 10000);
};

// Graceful stop
process.once('SIGINT', () => gracefulShutdown('SIGINT'));
process.once('SIGTERM', () => gracefulShutdown('SIGTERM'));

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
async function start() {
  try {
    await initDatabase();
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –µ—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±—ã–ª–æ –∑–∞–ø—É—â–µ–Ω–æ
    const state = await eventState.get();
    if (state && state.event_started) {
      await scheduler.start();
      console.log('Event scheduler restored');
    }
    
    await bot.launch();
    console.log('Bot started successfully');
  } catch (error) {
    console.error('Error starting bot:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
start(); 