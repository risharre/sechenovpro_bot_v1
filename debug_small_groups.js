const { distributeParticipants, analyzeParticipantMixing } = require('./utils');
const { stations } = require('./stations');

console.log('üîç –û–¢–õ–ê–î–ö–ê –î–õ–Ø –ú–ê–õ–´–• –ì–†–£–ü–ü');
console.log('=' .repeat(50));

function testSmallGroup(participantCount) {
  console.log(`\nüë• –¢–µ—Å—Ç–∏—Ä—É–µ–º ${participantCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:`);
  console.log('-'.repeat(30));
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    const distribution = distributeParticipants(participantCount);
    console.log('‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –≥—Ä—É–ø–ø
    let groupCoverageSuccess = true;
    for (let participant = 0; participant < participantCount; participant++) {
      const visitedGroups = new Set();
      const participantRoute = distribution[participant];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ—Å–µ—Ç–∏–ª —É—á–∞—Å—Ç–Ω–∏–∫
      for (let rotation = 0; rotation < participantRoute.length; rotation++) {
        const stationId = participantRoute[rotation];
        const station = stations.find(s => s.id === stationId);
        if (station) {
          visitedGroups.add(station.group);
        }
      }
      
      const hasAllGroups = visitedGroups.has('1') && visitedGroups.has('2') && visitedGroups.has('3');
      console.log(`  –£—á–∞—Å—Ç–Ω–∏–∫ ${participant + 1}: –≥—Ä—É–ø–ø—ã [${Array.from(visitedGroups).join(', ')}] ${hasAllGroups ? '‚úÖ' : '‚ùå'}`);
      
      if (!hasAllGroups) {
        groupCoverageSuccess = false;
      }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞–ª—ã—Ö –≥—Ä—É–ø–ø
    if (participantCount <= 5) {
      console.log('\nüìç –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:');
      for (let participant = 0; participant < participantCount; participant++) {
        const route = distribution[participant];
        console.log(`  –£—á–∞—Å—Ç–Ω–∏–∫ ${participant + 1}: ${route.join(' ‚Üí ')}`);
      }
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
    const analysis = analyzeParticipantMixing(distribution);
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`  ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ —Å–º–µ—à–∏–≤–∞–Ω–∏—è: ${analysis.mixingQuality}%`);
    console.log(`  ‚Ä¢ –ü–æ–∫—Ä—ã—Ç–∏–µ –≥—Ä—É–ø–ø: ${groupCoverageSuccess ? '100%' : '–û–®–ò–ë–ö–ê'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º
    console.log(`\nüéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ 1:`);
    const stationGroups = {};
    for (let participant = 0; participant < participantCount; participant++) {
      const station = distribution[participant][0];
      if (!stationGroups[station]) {
        stationGroups[station] = [];
      }
      stationGroups[station].push(participant + 1);
    }
    
    Object.keys(stationGroups).sort().forEach(station => {
      const participants = stationGroups[station];
      const stationInfo = stations.find(s => s.id === station);
      console.log(`  ${station} (${stationInfo.emoji}): [${participants.join(', ')}] (${participants.length} —á–µ–ª.)`);
    });
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    return false;
  }
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≥—Ä—É–ø–ø
const testCases = [1, 2, 3, 5, 10];

testCases.forEach(count => {
  const success = testSmallGroup(count);
  if (!success) {
    console.log(`\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¥–ª—è ${count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!`);
  }
});

console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'); 