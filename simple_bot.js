const { Telegraf } = require('telegraf');
const { session } = require('telegraf');
require('dotenv').config();

// –ò–º–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const { 
  participants, 
  admins,
  testConnection,
  createTablesSQL 
} = require('./simple_database');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–æ–∫–µ–Ω–∞
const botToken = process.env.TELEGRAM_BOT_TOKEN || process.env.BOT_TOKEN;
console.log(`üîÑ Using bot token from: ${process.env.TELEGRAM_BOT_TOKEN ? 'TELEGRAM_BOT_TOKEN' : 'BOT_TOKEN'}`);

const bot = new Telegraf(botToken);

// Middleware –¥–ª—è —Å–µ—Å—Å–∏–π
bot.use(session());

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–ø—Ä–æ—Å–∞
const STATES = {
  WAITING_FOR_STRENGTH: 'waiting_for_strength',
  WAITING_FOR_EXPERIENCE: 'waiting_for_experience', 
  WAITING_FOR_INTERESTS: 'waiting_for_interests',
  COMPLETED: 'completed'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initDatabase() {
  try {
    console.log('üîÑ Initializing simple database...');
    await testConnection();
    console.log('‚úÖ Database connection successful');
  } catch (error) {
    console.error('‚ùå Database initialization failed:', error);
    throw error;
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const username = ctx.from.username || '';
    const firstName = ctx.from.first_name || '';
    const lastName = ctx.from.last_name || '';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫
    let participant = await participants.getByUserId(userId);

    if (!participant) {
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
      participant = await participants.register(userId, username, firstName, lastName);
      
      // –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å
      ctx.session = { state: STATES.WAITING_FOR_STRENGTH, participantId: participant.id };
      
      await ctx.reply(
        `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n` +
        `üìã –í–∞—à –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${participant.participant_number}\n\n` +
        `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤:\n\n` +
        `1Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ 3 —Å–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã:`
      );
    } else {
      // –£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
      if (participant.team_number) {
        await ctx.reply(
          `üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n\n` +
          `üìã –í–∞—à –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${participant.participant_number}\n` +
          `üë• –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞: ${participant.team_number}`
        );
      } else if (participant.survey_completed) {
        await ctx.reply(
          `üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n\n` +
          `üìã –í–∞—à –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${participant.participant_number}\n` +
          `‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º...`
        );
      } else {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø—Ä–æ—Å
        ctx.session = { state: STATES.WAITING_FOR_STRENGTH, participantId: participant.id };
        await ctx.reply(`1Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ 3 —Å–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã:`);
      }
    }

  } catch (error) {
    console.error('Error in /start command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
bot.command('distribute', async (ctx) => {
  try {
    const username = ctx.from.username || '';
    const isAdmin = await admins.isAdmin(username);

    if (!isAdmin) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å
    const completedParticipants = await participants.getCompleted();
    
    if (completedParticipants.length === 0) {
      await ctx.reply('‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø—Ä–æ—à–µ–¥—à–∏—Ö –æ–ø—Ä–æ—Å!');
      return;
    }

    await ctx.reply(`üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ...\n\nüìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${completedParticipants.length}`);

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
    const shuffled = completedParticipants.sort(() => Math.random() - 0.5);
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–æ–º–∞–Ω–¥–∞–º (—Å—Ç—Ä–æ–≥–æ –Ω–µ –±–æ–ª–µ–µ 5 —á–µ–ª–æ–≤–µ–∫ –≤ –∫–æ–º–∞–Ω–¥–µ)
    const maxTeamSize = 5;
    const teamsCount = Math.ceil(shuffled.length / maxTeamSize);
    
    let teamAssignments = [];
    let currentTeam = 1;
    let currentTeamSize = 0;

    for (let i = 0; i < shuffled.length; i++) {
      // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ (5 —á–µ–ª–æ–≤–µ–∫) –∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞
      if (currentTeamSize >= maxTeamSize && currentTeam < teamsCount) {
        currentTeam++;
        currentTeamSize = 0;
      }
      
      teamAssignments.push({
        participantId: shuffled[i].id,
        teamNumber: currentTeam
      });
      
      currentTeamSize++;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É
    for (const assignment of teamAssignments) {
      await participants.assignTeam(assignment.participantId, assignment.teamNumber);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    let notificationsSent = 0;
    for (const assignment of teamAssignments) {
      try {
        const participant = shuffled.find(p => p.id === assignment.participantId);
        await bot.telegram.sendMessage(
          participant.user_id,
          `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\nüë• –ù–æ–º–µ—Ä –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã: ${assignment.teamNumber}\n\n–£–¥–∞—á–∏ –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç–µ!`
        );
        notificationsSent++;
      } catch (error) {
        console.error(`Failed to notify participant ${assignment.participantId}:`, error);
      }
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    const teamStats = {};
    teamAssignments.forEach(a => {
      teamStats[a.teamNumber] = (teamStats[a.teamNumber] || 0) + 1;
    });

    let statsMessage = `‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
    statsMessage += `‚Ä¢ –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${shuffled.length}\n`;
    statsMessage += `‚Ä¢ –ö–æ–º–∞–Ω–¥ —Å–æ–∑–¥–∞–Ω–æ: ${currentTeam}\n`;
    statsMessage += `‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: ${teamAssignments.length}\n`;
    statsMessage += `‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${notificationsSent}\n\n`;
    statsMessage += `üë• –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥:\n`;
    
    for (let i = 1; i <= currentTeam; i++) {
      statsMessage += `–ö–æ–º–∞–Ω–¥–∞ ${i}: ${teamStats[i] || 0} —á–µ–ª.\n`;
    }

    await ctx.reply(statsMessage);

  } catch (error) {
    console.error('Error in /distribute command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
bot.command('stats', async (ctx) => {
  try {
    const username = ctx.from.username || '';
    const isAdmin = await admins.isAdmin(username);

    if (!isAdmin) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }

    const totalParticipants = await participants.getCount();
    const completedParticipants = await participants.getCompleted();
    const distributedParticipants = await participants.getDistributed();

    let message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n`;
    message += `üë• –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${totalParticipants}\n`;
    message += `‚úÖ –ü—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å: ${completedParticipants.length}\n`;
    message += `üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ –∫–æ–º–∞–Ω–¥–∞–º: ${distributedParticipants.length}\n`;
    message += `‚è≥ –û–∂–∏–¥–∞—é—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ${completedParticipants.length - distributedParticipants.length}`;

    await ctx.reply(message);

  } catch (error) {
    console.error('Error in /stats command:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã)
bot.on('text', async (ctx) => {
  try {
    if (!ctx.session || !ctx.session.state) {
      return;
    }

    const userId = ctx.from.id;
    const answer = ctx.message.text;
    const participantId = ctx.session.participantId;

    switch (ctx.session.state) {
      case STATES.WAITING_FOR_STRENGTH:
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await participants.updateAnswer1(participantId, answer);
        
        ctx.session.state = STATES.WAITING_FOR_EXPERIENCE;
        await ctx.reply(`‚úÖ –°–ø–∞—Å–∏–±–æ!\n\n2Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ–ø—ã—Ç –Ω–∞—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º:`);
        break;

      case STATES.WAITING_FOR_EXPERIENCE:
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
        await participants.updateAnswer2(participantId, answer);
        
        ctx.session.state = STATES.WAITING_FOR_INTERESTS;
        await ctx.reply(`‚úÖ –û—Ç–ª–∏—á–Ω–æ!\n\n3Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –Ω–∞—É—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–æ—Ç 1 –¥–æ 3 —Ç–µ–∑–∏—Å–æ–≤):`);
        break;

      case STATES.WAITING_FOR_INTERESTS:
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å
        await participants.updateAnswer3(participantId, answer);
        await participants.markSurveyCompleted(participantId);
        
        ctx.session.state = STATES.COMPLETED;
        await ctx.reply(
          `‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!\n\n` +
          `‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –≤—ã–±–∏—Ä–∞–µ–º –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ–º–∞–Ω–¥—É...\n\n` +
          `–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ.`
        );
        break;
    }

  } catch (error) {
    console.error('Error processing text message:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`Error for ${ctx.updateType}:`, err);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function start() {
  try {
    await initDatabase();
    
    await bot.launch();
    console.log('‚úÖ Simple bot started successfully');
  } catch (error) {
    console.error('‚ùå Error starting bot:', error);
    process.exit(1);
  }
}

// Graceful shutdown
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

start(); 