const cron = require('node-cron');
const { participants, rotations, eventState } = require('./database');
const { getStationInfo, createStationMessage, getTimeUntilNextRotation } = require('./utils');
const { CYCLE_TIME, WARNING_TIME, TRANSITION_TIME, WORK_TIME, TOTAL_ROTATIONS } = require('./stations');

class EventScheduler {
  constructor(bot) {
    this.bot = bot;
    this.rotationJob = null;
    this.warningJob = null;
    this.notificationQueue = [];
    this.isProcessing = false;
    this.lastNotificationTime = {};
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
  async start() {
    console.log('Starting event scheduler...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const state = await eventState.get();
    if (!state || !state.event_started) {
      console.log('Event is not started, scheduler will not run');
      return;
    }

    if (state.event_paused) {
      console.log('Event is paused, scheduler will not run');
      return;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    this.scheduleRotations();
    this.scheduleWarnings();
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
  stop() {
    console.log('Stopping event scheduler...');
    
    if (this.rotationJob) {
      this.rotationJob.stop();
      this.rotationJob = null;
    }
    
    if (this.warningJob) {
      this.warningJob.stop();
      this.warningJob = null;
    }
    
    // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    this.lastNotificationTime = {};
  }

  // –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)
  pause() {
    console.log('Pausing event scheduler...');
    
    if (this.rotationJob) {
      this.rotationJob.stop();
    }
    
    if (this.warningJob) {
      this.warningJob.stop();
    }
  }

  // –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
  async resume() {
    console.log('Resuming event scheduler...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const state = await eventState.get();
    if (!state || !state.event_started) {
      console.log('Cannot resume: event not started');
      return;
    }

    if (state.event_paused) {
      console.log('Cannot resume: event still paused in database');
      return;
    }

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    this.scheduleRotations();
    this.scheduleWarnings();
  }

  // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–æ—Ç–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ CYCLE_TIME –º–∏–Ω—É—Ç
  scheduleRotations() {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–µ CYCLE_TIME –º–∏–Ω—É—Ç (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç: 4 —Ä–∞–±–æ—Ç–∞ + 1 –ø–µ—Ä–µ—Ö–æ–¥)
    const cronExpression = `*/${CYCLE_TIME} * * * *`;
    
    this.rotationJob = cron.schedule(cronExpression, async () => {
      try {
        await this.handleRotation();
      } catch (error) {
        console.error('Error in rotation handler:', error);
        if (process.env.NODE_ENV === 'production') {
          console.log('Rotation handler error in production, continuing...');
        }
      }
    });

    console.log(`Rotation scheduler started (every ${CYCLE_TIME} minutes)`);
  }

  // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ WARNING_TIME –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Ä–æ—Ç–∞—Ü–∏–∏
  scheduleWarnings() {
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑–∞ 1 –º–∏–Ω—É—Ç—É –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Ä–æ—Ç–∞—Ü–∏–∏
    // –ï—Å–ª–∏ —Ä–æ—Ç–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (0, 5, 10...), —Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –Ω–∞ 4, 9, 14... –º–∏–Ω—É—Ç–µ
    const warningOffset = CYCLE_TIME - TRANSITION_TIME; // 4 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Ä–æ—Ç–∞—Ü–∏–∏ = –∑–∞ 1 –º–∏–Ω—É—Ç—É –¥–æ –∫–æ–Ω—Ü–∞
    
    setTimeout(() => {
      const cronExpression = `*/${CYCLE_TIME} * * * *`;
      
      this.warningJob = cron.schedule(cronExpression, async () => {
        try {
          await this.handleWarning();
        } catch (error) {
          console.error('Error in warning handler:', error);
          if (process.env.NODE_ENV === 'production') {
            console.log('Warning handler error in production, continuing...');
          }
        }
      });
      
      console.log(`Warning scheduler started (${TRANSITION_TIME} minute before next rotation)`);
    }, warningOffset * 60 * 1000); // 4 –º–∏–Ω—É—Ç—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–æ—Ç–∞—Ü–∏—é
  async handleRotation() {
    const state = await eventState.get();
    if (!state || !state.event_started || state.event_paused) {
      if (state.event_paused) {
        console.log('Rotation skipped: event is paused');
      } else {
        this.stop();
      }
      return;
    }

    const currentRotation = state.current_rotation;
    const nextRotation = currentRotation + 1;

    // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ä–æ—Ç–∞—Ü–∏—è, –∑–∞–≤–µ—Ä—à–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    if (currentRotation >= TOTAL_ROTATIONS) {
      await this.handleEventEnd();
      return;
    }

    console.log(`Starting rotation ${nextRotation} of ${TOTAL_ROTATIONS}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ä–æ—Ç–∞—Ü–∏–∏
    await eventState.updateRotation(nextRotation);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    await this.notifyAllParticipants(nextRotation, 'rotation');
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ
  async handleWarning() {
    const state = await eventState.get();
    if (!state || !state.event_started || state.event_paused) {
      return;
    }

    const currentRotation = state.current_rotation;
    const nextRotation = currentRotation + 1;

    // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Ä–æ—Ç–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å –º–∞–∫—Å–∏–º—É–º –∏–ª–∏ –º—ã —É–∂–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π
    if (nextRotation > TOTAL_ROTATIONS) {
      return;
    }

    console.log(`Sending warning for upcoming rotation ${nextRotation}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    await this.notifyAllParticipants(nextRotation, 'warning');
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
  async handleEventEnd() {
    console.log('Event ended, sending final notifications...');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    await eventState.stop();
    this.stop();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await this.notifyAllParticipants(null, 'end');
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
  async notifyAllParticipants(rotationNumber, type) {
    const allParticipants = await participants.getAll();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
    for (const participant of allParticipants) {
      this.notificationQueue.push({
        participant,
        rotationNumber,
        type
      });
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
    if (!this.isProcessing) {
      this.processNotificationQueue();
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
  async processNotificationQueue() {
    this.isProcessing = true;

    while (this.notificationQueue.length > 0) {
      const notification = this.notificationQueue.shift();
      
      try {
        await this.sendNotification(notification);
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è rate limit
        await new Promise(resolve => setTimeout(resolve, 50));
      } catch (error) {
        console.error('Error sending notification:', error);
      }
    }

    this.isProcessing = false;
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  async sendNotification({ participant, rotationNumber, type }) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const notificationKey = `${participant.id}-${rotationNumber}-${type}`;
      const now = Date.now();
      
      if (this.lastNotificationTime[notificationKey]) {
        const timeSinceLastNotification = now - this.lastNotificationTime[notificationKey];
        // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 30 —Å–µ–∫—É–Ω–¥ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if (timeSinceLastNotification < 30000) {
          console.log(`Skipping duplicate notification for participant ${participant.participant_number}`);
          return;
        }
      }
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      this.lastNotificationTime[notificationKey] = now;

      let message = '';

      if (type === 'rotation') {
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
        const stationId = await rotations.getCurrentStation(participant.id, rotationNumber);
        if (!stationId) return;

        const station = getStationInfo(stationId);
        message = createStationMessage(station, rotationNumber, TOTAL_ROTATIONS);
        
        if (rotationNumber === 1) {
          // –ü–µ—Ä–≤–∞—è —Ä–æ—Ç–∞—Ü–∏—è - –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é
          message = `üöÄ *–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!*\n\n${message}`;
        } else {
          // –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ —Ä–æ—Ç–∞—Ü–∏–∏ - –ø–µ—Ä–µ—Ö–æ–¥ + –≤—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥
          message = `üîÑ *–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç–∞–Ω—Ü–∏—é!*\n\n${message}`;
          message += `\n‚è±Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å ${TRANSITION_TIME} –º–∏–Ω—É—Ç–∞ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Å—Ç–∞–Ω—Ü–∏—è–º–∏.`;
        }
        
      } else if (type === 'warning') {
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –ø–µ—Ä–µ—Ö–æ–¥–µ
        const nextStationId = await rotations.getCurrentStation(participant.id, rotationNumber);
        
        if (!nextStationId) return;

        const nextStation = getStationInfo(nextStationId);
        message = `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!*\n\n`;
        message += `–ß–µ—Ä–µ–∑ ${TRANSITION_TIME} –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–∞–Ω—Ü–∏—é:\n\n`;
        message += `${nextStation.emoji} *${nextStation.name}*\n`;
        message += `_${nextStation.shortTitle}_\n\n`;
        message += `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø–µ—Ä–µ—Ö–æ–¥—É.`;
        
      } else if (type === 'end') {
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        message = `üéâ *–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!*\n\n`;
        message += `–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ Sechenov Pro Network!\n\n`;
        message += `–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –≤—Å–µ ${TOTAL_ROTATIONS} —Ä–æ—Ç–∞—Ü–∏–∏.\n\n`;
        message += `üìù –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:\n`;
        message += process.env.CV_FORM_URL || 'https://forms.yandex.ru/cloud/67d6fd5090fa7be3dc213e5f/';
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.bot.telegram.sendMessage(
        participant.user_id,
        message,
        { parse_mode: 'Markdown', disable_web_page_preview: true }
      );
      
      console.log(`Sent ${type} notification to participant ${participant.participant_number}`);
      
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)
      if (error.code !== 403) {
        console.error(`Error sending notification to ${participant.participant_number}:`, error.message);
      }
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
  async sendInitialNotifications() {
    await this.notifyAllParticipants(1, 'rotation');
  }
}

module.exports = EventScheduler; 