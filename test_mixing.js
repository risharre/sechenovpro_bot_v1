const { distributeParticipants, analyzeParticipantMixing } = require('./utils');

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º —Å —Ä–∞–∑–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
console.log('üß™ –¢–ï–°–¢ –ê–õ–ì–û–†–ò–¢–ú–ê –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ì–û –°–ú–ï–®–ò–í–ê–ù–ò–Ø\n');

function testAlgorithm(participantCount) {
  console.log(`\nüë• –¢–µ—Å—Ç–∏—Ä—É–µ–º ${participantCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:`);
  console.log('‚îÅ'.repeat(50));
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ
  let bestDistribution = null;
  let bestAnalysis = null;
  let bestScore = 0;
  
  for (let attempt = 0; attempt < 5; attempt++) {
    const distribution = distributeParticipants(participantCount);
    const analysis = analyzeParticipantMixing(distribution);
    const score = parseFloat(analysis.mixingQuality);
    
    if (score > bestScore) {
      bestScore = score;
      bestDistribution = distribution;
      bestAnalysis = analysis;
    }
  }
  
  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:`);
  console.log(`   ‚Ä¢ –í—Å–µ–≥–æ –ø–∞—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${bestAnalysis.totalPairs}`);
  console.log(`   ‚Ä¢ –ü–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—Ç—è—Ç—Å—è: ${bestAnalysis.pairsWhoMet}`);
  console.log(`   ‚Ä¢ –ü–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –≤—Å—Ç—Ä–µ—Ç—è—Ç—Å—è: ${bestAnalysis.pairsWhoNeverMet}`);
  console.log(`   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –≤—Å—Ç—Ä–µ—á –æ–¥–Ω–æ–π –ø–∞—Ä—ã: ${bestAnalysis.maxMeetingsPerPair}`);
  console.log(`   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Å—Ç—Ä–µ—á –Ω–∞ –ø–∞—Ä—É: ${bestAnalysis.avgMeetingsPerPair}`);
  console.log(`   ‚Ä¢ üéØ –ö–∞—á–µ—Å—Ç–≤–æ —Å–º–µ—à–∏–≤–∞–Ω–∏—è: ${bestAnalysis.mixingQuality}%`);
  
  // –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
  if (bestScore >= 80) {
    console.log(`   ‚úÖ –û–¢–õ–ò–ß–ù–û–ï —Å–º–µ—à–∏–≤–∞–Ω–∏–µ!`);
  } else if (bestScore >= 60) {
    console.log(`   ‚ö†Ô∏è –•–û–†–û–®–ï–ï —Å–º–µ—à–∏–≤–∞–Ω–∏–µ`);
  } else {
    console.log(`   ‚ùå –ü–õ–û–•–û–ï —Å–º–µ—à–∏–≤–∞–Ω–∏–µ`);
  }
  
  return bestDistribution;
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º
function showDistributionExample(distribution, participantCount) {
  console.log(`\nüìç –ü—Ä–∏–º–µ—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º (–ø–µ—Ä–≤—ã–µ 3 —Ä–æ—Ç–∞—Ü–∏–∏):`);
  console.log('‚îÅ'.repeat(70));
  
  for (let rotation = 0; rotation < Math.min(3, distribution[0].length); rotation++) {
    console.log(`\nüîÑ –†–æ—Ç–∞—Ü–∏—è ${rotation + 1}:`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º
    const stationGroups = {};
    for (let participant = 0; participant < participantCount; participant++) {
      const station = distribution[participant][rotation];
      if (!stationGroups[station]) {
        stationGroups[station] = [];
      }
      stationGroups[station].push(participant + 1); // +1 –¥–ª—è —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    Object.keys(stationGroups).sort().forEach(station => {
      const participants = stationGroups[station];
      console.log(`   –°—Ç–∞–Ω—Ü–∏—è ${station}: [${participants.join(', ')}] (${participants.length} —á–µ–ª.)`);
    });
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
const testCases = [10, 27, 54, 150]; // –†–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≥—Ä—É–ø–ø

testCases.forEach(count => {
  const distribution = testAlgorithm(count);
  
  if (count <= 27) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –≥—Ä—É–ø–ø
    showDistributionExample(distribution, count);
  }
});

console.log('\nüéØ –í–´–í–û–î–´:');
console.log('‚îÅ'.repeat(50));
console.log('‚úÖ –ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï —Å–º–µ—à–∏–≤–∞–Ω–∏–µ');
console.log('‚úÖ –ö–∞–∂–¥–∞—è —Ä–æ—Ç–∞—Ü–∏—è - –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ');
console.log('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∑–Ω–∞–∫–æ–º—è—Ç—Å—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª—é–¥–µ–π');
console.log('‚úÖ –ò—Å–∫–ª—é—á–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –≥—Ä—É–ø–ø—ã –º–µ–∂–¥—É —Ä–æ—Ç–∞—Ü–∏—è–º–∏');
console.log('\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!'); 