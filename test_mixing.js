const { distributeParticipants, analyzeParticipantMixing } = require('./utils');
const { stations, TOTAL_ROTATIONS } = require('./stations');

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º —Å —Ä–∞–∑–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–õ–ì–û–†–ò–¢–ú–ê –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø');
console.log('=' .repeat(50));

function testGroupCoverage(participantCount) {
  console.log(`\nüë• –¢–µ—Å—Ç–∏—Ä—É–µ–º ${participantCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:`);
  console.log('-'.repeat(30));
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
  const distribution = distributeParticipants(participantCount);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –≥—Ä—É–ø–ø
  let groupCoverageCount = 0;
  for (let participant = 0; participant < participantCount; participant++) {
    const visitedGroups = new Set();
    const participantRoute = distribution[participant];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ—Å–µ—Ç–∏–ª —É—á–∞—Å—Ç–Ω–∏–∫
    for (let rotation = 0; rotation < participantRoute.length; rotation++) {
      const stationId = participantRoute[rotation];
      const station = stations.find(s => s.id === stationId);
      if (station) {
        visitedGroups.add(station.group);
      }
    }
    
    const hasAllGroups = visitedGroups.has('1') && visitedGroups.has('2') && visitedGroups.has('3');
    console.log(`  –£—á–∞—Å—Ç–Ω–∏–∫ ${participant + 1}: –≥—Ä—É–ø–ø—ã [${Array.from(visitedGroups).join(', ')}] ${hasAllGroups ? '‚úÖ' : '‚ùå'}`);
    
    if (hasAllGroups) {
      groupCoverageCount++;
    }
  }
  
  const groupCoveragePercent = (groupCoverageCount / participantCount * 100).toFixed(1);
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
  const analysis = analyzeParticipantMixing(distribution);
  
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
  console.log(`  ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ —Å–º–µ—à–∏–≤–∞–Ω–∏—è: ${analysis.mixingQuality}%`);
  console.log(`  ‚Ä¢ –ü–æ–∫—Ä—ã—Ç–∏–µ –≥—Ä—É–ø–ø: ${groupCoveragePercent}% (${groupCoverageCount}/${participantCount})`);
  console.log(`  ‚Ä¢ –†–æ—Ç–∞—Ü–∏–π: ${TOTAL_ROTATIONS}`);
  
  return { 
    participantCount, 
    mixingQuality: parseFloat(analysis.mixingQuality),
    groupCoverage: parseFloat(groupCoveragePercent),
    rotations: TOTAL_ROTATIONS
  };
}

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
const testCases = [27, 54, 90, 150];

console.log(`\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª—É—á–∞–∏: ${testCases.join(', ')} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);

const results = [];
testCases.forEach(count => {
  const result = testGroupCoverage(count);
  results.push(result);
  
  if (count <= 54) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –≥—Ä—É–ø–ø
    showDistributionExample(count);
  }
});

console.log('\nüìä –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
console.log('=' .repeat(70));
console.log('| –£—á–∞—Å—Ç–Ω–∏–∫–∏ | –°–º–µ—à–∏–≤–∞–Ω–∏–µ | –ü–æ–∫—Ä—ã—Ç–∏–µ –≥—Ä—É–ø–ø | –†–æ—Ç–∞—Ü–∏–∏ |');
console.log('|-----------|------------|----------------|---------|');
results.forEach(r => {
  console.log(`| ${r.participantCount.toString().padStart(9)} | ${r.mixingQuality.toString().padStart(8)}% | ${r.groupCoverage.toString().padStart(12)}% | ${r.rotations.toString().padStart(7)} |`);
});

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Ä–æ—Ç–∞—Ü–∏—è–º
function showDistributionExample(participantCount) {
  console.log(`\nüìç –ü—Ä–∏–º–µ—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è ${participantCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:`);
  console.log('-'.repeat(50));
  
  const distribution = distributeParticipants(participantCount);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–æ—Ç–∞—Ü–∏—è–º
  for (let rotation = 0; rotation < TOTAL_ROTATIONS; rotation++) {
    console.log(`\nüîÑ –†–æ—Ç–∞—Ü–∏—è ${rotation + 1} (–ì—Ä—É–ø–ø–∞ ${rotation + 1}):`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º –¥–ª—è —ç—Ç–æ–π —Ä–æ—Ç–∞—Ü–∏–∏
    const stationGroups = {};
    for (let participant = 0; participant < participantCount; participant++) {
      const station = distribution[participant][rotation];
      if (!stationGroups[station]) {
        stationGroups[station] = [];
      }
      stationGroups[station].push(participant + 1);
    }
    
    // –í—ã–≤–æ–¥–∏–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º
    Object.keys(stationGroups).sort().forEach(stationId => {
      const participants = stationGroups[stationId];
      const station = stations.find(s => s.id === stationId);
      console.log(`  ${stationId} ${station.emoji}: [${participants.join(', ')}] (${participants.length} —á–µ–ª.)`);
    });
  }
}

console.log('\nüéØ –í–´–í–û–î–´:');
console.log('=' .repeat(50));
console.log('‚úÖ –ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å 3 —Ä–æ—Ç–∞—Ü–∏—è–º–∏:');
console.log('   ‚Ä¢ –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ—Å–µ—â–∞–µ—Ç —Ä–æ–≤–Ω–æ 3 —Å—Ç–∞–Ω—Ü–∏–∏ (–ø–æ –æ–¥–Ω–æ–π –∏–∑ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã)');
console.log('   ‚Ä¢ 100% –ø–æ–∫—Ä—ã—Ç–∏–µ –≥—Ä—É–ø–ø –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º–∞');
console.log('   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–º–µ—à–∏–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–∞–∂–¥–æ–π —Ä–æ—Ç–∞—Ü–∏–∏');
console.log('   ‚Ä¢ –í—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: 15 –º–∏–Ω—É—Ç (3 —Ä–æ—Ç–∞—Ü–∏–∏ √ó 5 –º–∏–Ω—É—Ç)');
console.log('   ‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ~90 —á–µ–ª–æ–≤–µ–∫');

console.log('\n‚è∞ –¢–ê–ô–ú–ò–ù–ì–ò:');
console.log('   ‚Ä¢ –†–∞–±–æ—Ç–∞ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏: 4 –º–∏–Ω—É—Ç—ã');
console.log('   ‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Å—Ç–∞–Ω—Ü–∏—è–º–∏: 1 –º–∏–Ω—É—Ç–∞');
console.log('   ‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —á–µ—Ä–µ–∑ 4 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Ä–æ—Ç–∞—Ü–∏–∏');
console.log('   ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ: —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç (–Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Ä–æ—Ç–∞—Ü–∏–∏)');

console.log('\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!'); 