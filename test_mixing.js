const { distributeParticipants, analyzeParticipantMixing } = require('./utils');
const { stations } = require('./stations');

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º —Å —Ä–∞–∑–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
console.log('üß™ –¢–ï–°–¢ –ê–õ–ì–û–†–ò–¢–ú–ê –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–û –ì–†–£–ü–ü–ê–ú –°–¢–ê–ù–¶–ò–ô\n');

function testAlgorithm(participantCount) {
  console.log(`\nüë• –¢–µ—Å—Ç–∏—Ä—É–µ–º ${participantCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:`);
  console.log('‚îÅ'.repeat(50));
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ
  let bestDistribution = null;
  let bestAnalysis = null;
  let bestScore = 0;
  let bestGroupCoverage = 0;
  
  for (let attempt = 0; attempt < 5; attempt++) {
    const distribution = distributeParticipants(participantCount);
    const analysis = analyzeParticipantMixing(distribution);
    const groupCoverage = analyzeGroupCoverage(distribution);
    const score = parseFloat(analysis.mixingQuality) + groupCoverage.coveragePercentage;
    
    if (score > bestScore) {
      bestScore = score;
      bestDistribution = distribution;
      bestAnalysis = analysis;
      bestGroupCoverage = groupCoverage;
    }
  }
  
  // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:`);
  console.log(`   ‚Ä¢ –í—Å–µ–≥–æ –ø–∞—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${bestAnalysis.totalPairs}`);
  console.log(`   ‚Ä¢ –ü–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—Ç—è—Ç—Å—è: ${bestAnalysis.pairsWhoMet}`);
  console.log(`   ‚Ä¢ –ü–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –≤—Å—Ç—Ä–µ—Ç—è—Ç—Å—è: ${bestAnalysis.pairsWhoNeverMet}`);
  console.log(`   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –≤—Å—Ç—Ä–µ—á –æ–¥–Ω–æ–π –ø–∞—Ä—ã: ${bestAnalysis.maxMeetingsPerPair}`);
  console.log(`   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Å—Ç—Ä–µ—á –Ω–∞ –ø–∞—Ä—É: ${bestAnalysis.avgMeetingsPerPair}`);
  console.log(`   ‚Ä¢ üéØ –ö–∞—á–µ—Å—Ç–≤–æ —Å–º–µ—à–∏–≤–∞–Ω–∏—è: ${bestAnalysis.mixingQuality}%`);
  
  console.log(`\nüéØ –ü–æ–∫—Ä—ã—Ç–∏–µ –≥—Ä—É–ø–ø —Å—Ç–∞–Ω—Ü–∏–π:`);
  console.log(`   ‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏, –ø–æ—Å–µ—Ç–∏–≤—à–∏–µ –≤—Å–µ –≥—Ä—É–ø–ø—ã: ${bestGroupCoverage.participantsWithAllGroups}/${participantCount} (${bestGroupCoverage.coveragePercentage.toFixed(1)}%)`);
  console.log(`   ‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å –≥—Ä—É–ø–ø–æ–π 1: ${bestGroupCoverage.group1Count}/${participantCount}`);
  console.log(`   ‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å –≥—Ä—É–ø–ø–æ–π 2: ${bestGroupCoverage.group2Count}/${participantCount}`);
  console.log(`   ‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å –≥—Ä—É–ø–ø–æ–π 3: ${bestGroupCoverage.group3Count}/${participantCount}`);
  
  // –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
  if (bestGroupCoverage.coveragePercentage === 100 && parseFloat(bestAnalysis.mixingQuality) >= 80) {
    console.log(`   ‚úÖ –û–¢–õ–ò–ß–ù–û–ï —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ!`);
  } else if (bestGroupCoverage.coveragePercentage >= 90 && parseFloat(bestAnalysis.mixingQuality) >= 60) {
    console.log(`   ‚ö†Ô∏è –•–û–†–û–®–ï–ï —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ`);
  } else {
    console.log(`   ‚ùå –ü–õ–û–•–û–ï —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ`);
  }
  
  return bestDistribution;
}

// –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è –≥—Ä—É–ø–ø —Å—Ç–∞–Ω—Ü–∏–π
function analyzeGroupCoverage(distributions) {
  const participantCount = distributions.length;
  let participantsWithAllGroups = 0;
  let group1Count = 0;
  let group2Count = 0;
  let group3Count = 0;
  
  for (let participant = 0; participant < participantCount; participant++) {
    const visitedGroups = new Set();
    const participantRoute = distributions[participant];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ—Å–µ—Ç–∏–ª —É—á–∞—Å—Ç–Ω–∏–∫
    for (let rotation = 0; rotation < participantRoute.length; rotation++) {
      const stationId = participantRoute[rotation];
      const station = stations.find(s => s.id === stationId);
      if (station) {
        visitedGroups.add(station.group);
      }
    }
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (visitedGroups.has('1')) group1Count++;
    if (visitedGroups.has('2')) group2Count++;
    if (visitedGroups.has('3')) group3Count++;
    
    if (visitedGroups.has('1') && visitedGroups.has('2') && visitedGroups.has('3')) {
      participantsWithAllGroups++;
    }
  }
  
  return {
    participantsWithAllGroups,
    group1Count,
    group2Count,
    group3Count,
    coveragePercentage: (participantsWithAllGroups / participantCount) * 100
  };
}

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º
function showDistributionExample(distribution, participantCount) {
  console.log(`\nüìç –ü—Ä–∏–º–µ—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º (–ø–µ—Ä–≤—ã–µ 3 —Ä–æ—Ç–∞—Ü–∏–∏):`);
  console.log('‚îÅ'.repeat(70));
  
  for (let rotation = 0; rotation < Math.min(3, distribution[0].length); rotation++) {
    console.log(`\nüîÑ –†–æ—Ç–∞—Ü–∏—è ${rotation + 1}:`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º
    const stationGroups = {};
    for (let participant = 0; participant < participantCount; participant++) {
      const station = distribution[participant][rotation];
      if (!stationGroups[station]) {
        stationGroups[station] = [];
      }
      stationGroups[station].push(participant + 1); // +1 –¥–ª—è —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º
    ['1', '2', '3'].forEach(group => {
      console.log(`   –ì—Ä—É–ø–ø–∞ ${group}:`);
      Object.keys(stationGroups).filter(station => station.startsWith(group + '.')).sort().forEach(station => {
        const participants = stationGroups[station];
        const stationInfo = stations.find(s => s.id === station);
        console.log(`     –°—Ç–∞–Ω—Ü–∏—è ${station} (${stationInfo.emoji}): [${participants.join(', ')}] (${participants.length} —á–µ–ª.)`);
      });
    });
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
const testCases = [27, 54, 90, 150]; // –†–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≥—Ä—É–ø–ø, –≤–∫–ª—é—á–∞—è —Ü–µ–ª–µ–≤—ã–µ 90 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

testCases.forEach(count => {
  const distribution = testAlgorithm(count);
  
  if (count <= 54) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –≥—Ä—É–ø–ø
    showDistributionExample(distribution, count);
  }
});

console.log('\nüéØ –í–´–í–û–î–´:');
console.log('‚îÅ'.repeat(50));
console.log('‚úÖ –ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —É—á–∏—Ç—ã–≤–∞–µ—Ç –≥—Ä—É–ø–ø—ã —Å—Ç–∞–Ω—Ü–∏–π');
console.log('‚úÖ –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ—Å–µ—â–∞–µ—Ç –≤—Å–µ 3 –≥—Ä—É–ø–ø—ã —Å—Ç–∞–Ω—Ü–∏–π');
console.log('‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–º–µ—à–∏–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø');
console.log('‚úÖ 9 —Å—Ç–∞–Ω—Ü–∏–π (3 –≥—Ä—É–ø–ø—ã –ø–æ 3 –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏) √ó 5-–º–∏–Ω—É—Ç–Ω—ã–π —Ü–∏–∫–ª');
console.log('‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è 90 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (~10 –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é)');
console.log('\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!'); 